{"version":3,"file":"static/js/31.12bf134f.chunk.js","mappings":"mOACA,GAAgB,aAAe,4BAA4B,SAAW,wBAAwB,UAAY,yBAAyB,UAAY,yBAAyB,aAAe,6B,UCAvL,EAA+B,gCAA/B,EAA2E,6BAA3E,EAAqH,8BAArH,EAA6J,2B,SCmC1J,EAjCa,SAAH,GAMT,IAN4F,IAA9EA,EAAe,EAAfA,gBAAiBC,EAAQ,EAARA,SAAUC,EAAa,EAAbA,cAAeC,EAAW,EAAXA,YAAY,EAAD,EAAEC,YAAAA,OAAW,MAAG,GAAE,EAEjFC,EAAaC,KAAKC,KAAMP,EAAkBC,GAE1CO,EAAQ,GAEHC,EAAI,EAAGA,GAAKJ,EAAYI,IAC7BD,EAAME,KAAKD,GAGf,IAAIE,EAAeL,KAAKC,KAAKF,EAAaD,GAC1C,GAAwCQ,EAAAA,EAAAA,UAAS,GAAE,eAA9CC,EAAa,KAAEC,EAAgB,KAChCC,GAAyBF,EAAgB,GAAKT,EAAc,EAC5DY,EAAyBH,EAAgBT,EAE7C,OAAQ,iBAAKa,UAAWC,EAAY,UACjCL,EAAgB,IACd,mBAAQM,QAAS,WAAOL,EAAiBD,EAAgB,EAAE,EAAGI,UAAWC,EAAU,kBAE3EV,EACAY,QAAO,SAAAC,GAAC,OAAIA,GAAKN,GAAyBM,GAAKL,CAAsB,IACrEM,KAAI,SAAAD,GACH,OAAO,iBAAcJ,WAAYd,IAAgBkB,EAAIH,OAAiBK,GAAa,IAAML,EACzFC,QAAS,WAAOjB,EAAcmB,EAAE,EAAE,SAAEA,GADlBA,EAEpB,IAETV,EAAeE,IACb,mBAAQM,QAAS,WAAOL,EAAiBD,EAAgB,EAAE,EAAGI,UAAWC,EAAU,oBAIzF,E,UCmCH,EA/DW,SAAH,GAAuD,IAAlDM,EAAI,EAAJA,KAAMC,EAAmB,EAAnBA,oBAAqBC,EAAQ,EAARA,SAAUC,EAAM,EAANA,OAE9C,OAAQ,iBAAKV,UAAWC,EAAAA,aAAe,WACxB,kBAAMD,UAAWC,EAAAA,SAAW,WACzB,0BACE,SAAC,KAAO,CAACU,GAAI,YAAcJ,EAAKK,GAAG,UAC/B,gBAAKC,IAA2B,MAArBN,EAAKO,OAAOC,MAAgBR,EAAKO,OAAOC,M,iwYAAmBC,IAAI,GAAGhB,UAAWC,EAAAA,iBAG9F,yBACOM,EAAKU,UAAW,mBAAQC,SAAUV,EAAoBW,MAAK,SAAAP,GAAE,OAAIA,IAAOL,EAAKK,EAAE,IAAGV,QAAS,WAE7FO,EAASF,EAAKK,GAejB,EAAGZ,UAAWC,EAAAA,aAAe,uBAC3B,mBAAQiB,SAAUV,EAAoBW,MAAK,SAAAP,GAAE,OAAIA,IAAOL,EAAKK,EAAE,IAAGV,QAAS,WAEzEQ,EAAOH,EAAKK,GAehB,EAAGZ,UAAWC,EAAAA,aAAe,0BAGlC,kBAAMD,UAAWC,EAAAA,UAAY,WACzB,6BACK,yBAAMM,EAAKa,QACX,yBAAMb,EAAKc,aAEhB,6BACK,yBAAM,qBACN,yBAAM,+BAKlC,E,+DC9CA,EAdY,SAAH,GAA2E,IAAtEC,EAAe,EAAfA,gBAAiBtC,EAAQ,EAARA,SAAUE,EAAW,EAAXA,YAAaD,EAAa,EAAbA,cAAkBsC,GAAK,YAEzE,OAAO,iBAAKvB,UAAWC,EAAAA,MAAQ,WAE3B,SAAC,EAAS,CAAClB,gBAAiBuC,EAAiBtC,SAAUA,EAAUE,YAAaA,EAAaD,cAAeA,KAE1G,2BAECsC,EAAMC,MAAMnB,KAAI,SAAAoB,GAAC,OAAI,SAAC,EAAI,CAAYlB,KAAMkB,EAAGjB,oBAAqBe,EAAMf,oBAAqBE,OAAQa,EAAMb,OAAQD,SAAUc,EAAMd,UAArGgB,EAAEb,GAA8G,IAAC,SAI1J,E,8BChBac,EAAW,SAACC,GACrB,OAAOA,EAAMC,UAAUJ,KAC3B,EAKaK,EAAc,SAACF,GACxB,OAAOA,EAAMC,UAAU5C,QAC3B,EAEa8C,EAAqB,SAACH,GAC/B,OAAOA,EAAMC,UAAUN,eAC3B,EAEaS,EAAiB,SAACJ,GAC3B,OAAOA,EAAMC,UAAU1C,WAC3B,EAEa8C,EAAgB,SAACL,GAC1B,OAAOA,EAAMC,UAAUK,UAC3B,EAEaC,EAAyB,SAACP,GACnC,OAAOA,EAAMC,UAAUpB,mBAC3B,ECjBM2B,EAAc,qJAyBf,OAzBe,oCAehBlD,cAAgB,SAACmD,GAEb,EAAKb,MAAMc,aAAaD,EAAY,EAAKb,MAAMvC,SAQnD,EAAC,EAmBG,OAnBH,yCAvBD,WAEIsD,KAAKf,MAAMc,aAAaC,KAAKf,MAAMrC,YAAaoD,KAAKf,MAAMvC,SAS/D,GAAC,oBAcD,WAEI,OAAQ,gCAEPsD,KAAKf,MAAMU,YAAa,SAAC,IAAS,IAAK,MAExC,SAAC,EAAK,CAACX,gBAAiBgB,KAAKf,MAAMD,gBACpBtC,SAAUsD,KAAKf,MAAMvC,SACrBE,YAAaoD,KAAKf,MAAMrC,YACxBD,cAAeqD,KAAKrD,cACpBwB,SAAU6B,KAAKf,MAAMd,SACrBC,OAAQ4B,KAAKf,MAAMb,OACnBc,MAAOc,KAAKf,MAAMC,MAElBhB,oBAAqB8B,KAAKf,MAAMf,wBAGhD,KAAC,EA5CY,CAAS+B,EAAAA,WAwF7B,GAAeC,EAAAA,EAAAA,KAASC,EAAAA,EAAAA,KAzCF,SAACd,GACnB,MAAO,CAEHH,MAAOE,EAASC,GAChB3C,SAAU6C,EAAYF,GACtBL,gBAAiBQ,EAAmBH,GACpCzC,YAAa6C,EAAeJ,GAC5BM,WAAYD,EAAcL,GAC1BnB,oBAAqB0B,EAAuBP,GAGpD,GA8BkD,CAACjB,OAAAA,EAAAA,GAAQD,SAAAA,EAAAA,GAAWiC,eAAAA,EAAAA,GAAgBC,wBAAAA,EAAAA,GAAyBN,aAAAA,EAAAA,KACvFO,EAAAA,EADxB,CAC2CT,E","sources":["webpack://react-1/./src/components/Users/users.module.css?9211","webpack://react-1/./src/components/common/Paginator/paginator.module.css?28dc","components/common/Paginator/paginator.jsx","components/Users/user.jsx","components/Users/users.jsx","selectors/users-selectors.js","components/Users/usersContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"usersContent\":\"users_usersContent__JV3wS\",\"usersAva\":\"users_usersAva__3t9YA\",\"usersInfo\":\"users_usersInfo__5n0en\",\"userPhoto\":\"users_userPhoto__L93Sd\",\"followButton\":\"users_followButton__42xAO\"};","// extracted by mini-css-extract-plugin\nexport default {\"selectedPage\":\"paginator_selectedPage__r-Nry\",\"paginator\":\"paginator_paginator__BDRg7\",\"pageNumber\":\"paginator_pageNumber__rf6vq\",\"pageBtn\":\"paginator_pageBtn__VwhE6\"};","import React, { useState } from \"react\";\r\nimport s from './paginator.module.css';\r\n\r\nlet Paginator = ({totalItemsCount, pageSize, onPageChanged, currentPage, portionSize = 10}) => {\r\n     \r\n    let pagesCount = Math.ceil (totalItemsCount / pageSize);   //высчитываем количество страниц\r\n\r\n    let pages = [];   //создаем массив куда будут добавляться страницы с помощью цикла for\r\n\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }  \r\n    \r\n    let portionCount = Math.ceil(pagesCount / portionSize);   //из props к нам приходит,  portionCount - сколько порций получилось\r\n    let [portionNumber, setPortionNumber] = useState(1);      // используем локальный state - 1 это portionNumber, а setPortionNumber - функция, которая меняет portionNumber \r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    return  <div className={s.paginator}>  \r\n      {portionNumber > 1 &&                                       // показывай кнопку если portionNumber > 1\r\n         <button onClick={() => {setPortionNumber(portionNumber - 1)}} className={s.pageBtn}>PREV</button>\r\n      }                            \r\n                {pages\r\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber ) //нужно отрисовать странички больше левой половины и меньше правой половины порции\r\n                .map(p => {\r\n                  return <span key={p} className={(currentPage === p ? s.selectedPage : undefined) + ' ' + s.pageNumber}\r\n                  onClick={() => {onPageChanged(p)}}>{p}</span>    //создаем страницы и добавляем выделение для текущей страницы\r\n                })}\r\n\r\n      {portionCount > portionNumber && \r\n         <button onClick={() => {setPortionNumber(portionNumber + 1)}} className={s.pageBtn}>NEXT</button>\r\n      }   \r\n                \r\n            </div>\r\n   }\r\n\r\n   export default Paginator;     ","import React from \"react\";\r\nimport s from './users.module.css';\r\nimport userPhoto from '../../assets/images/user.png';\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\n\r\nlet User = ({user, followingInProgress, unfollow, follow}) => {     \r\n              \r\n    return  <div className={s.usersContent}>\r\n                   <span className={s.usersAva}>\r\n                      <div>\r\n                        <NavLink to={'/profile/' + user.id}>\r\n                            <img src ={user.photos.small != null ? user.photos.small : userPhoto} alt='' className={s.userPhoto}/>\r\n                        </NavLink>\r\n                      </div>\r\n                      <div>\r\n                           { user.followed ? <button disabled={followingInProgress.some(id => id === user.id)} onClick={() => {                            \r\n                           \r\n                           unfollow(user.id);\r\n\r\n                           /*props.toggleFollowingProgress(true, u.id);\r\n\r\n                            usersAPI.unfollow(u.id)\r\n\r\n                            -axios.delete(`https://social-network.samuraijs.com/api/1.0/follow/${u.id}`,\r\n                                     {withCredentials: true})-\r\n                            .then(response => {\r\n                                if (response.data.resultCode === 0) {\r\n                                    props.unfollow(u.id);\r\n                                }\r\n                            props.toggleFollowingProgress(false, u.id);                            \r\n                            });*/\r\n                            \r\n                        }} className={s.followButton}>Unfollow</button> \r\n                        : <button disabled={followingInProgress.some(id => id === user.id)} onClick={() => {\r\n\r\n                            follow(user.id);\r\n\r\n                           /* props.toggleFollowingProgress(true, u.id);\r\n\r\n                            usersAPI.follow(u.id)\r\n\r\n                           -axios.post(`https://social-network.samuraijs.com/api/1.0/follow/${u.id}`, {},\r\n                                        {withCredentials: true})-\r\n                            .then(response => {\r\n                                if (response.data.resultCode === 0) {\r\n                                    props.follow(u.id);\r\n                                }\r\n                            props.toggleFollowingProgress(false, u.id);\r\n                            })*/\r\n\r\n                        }} className={s.followButton}>Follow</button>}\r\n                      </div>\r\n                   </span>\r\n                   <span className={s.usersInfo}>\r\n                       <span>\r\n                            <div>{user.name}</div>\r\n                            <div>{user.status}</div>\r\n                       </span>\r\n                       <span>\r\n                            <div>{'u.location.city'}</div>\r\n                            <div>{'u.location.country'}</div>\r\n                       </span>\r\n                   </span>\r\n            </div>\r\n                      \r\n}      \r\n\r\n\r\nexport default User;","import React from \"react\";\r\nimport s from './users.module.css';\r\nimport Paginator from \"../common/Paginator/paginator\";\r\nimport User from \"./user\";\r\n\r\n\r\nlet Users = ({totalUsersCount, pageSize, currentPage, onPageChanged, ...props}) => {\r\n     \r\n    return <div className={s.users}>         \r\n            \r\n        <Paginator totalItemsCount={totalUsersCount} pageSize={pageSize} currentPage={currentPage} onPageChanged={onPageChanged} />\r\n        \r\n        <div>\r\n        { \r\n         props.users.map(u => <User key={u.id} user={u} followingInProgress={props.followingInProgress} follow={props.follow} unfollow={props.unfollow}/>)        \r\n        };\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Users;","//import { createSelector } from \"reselect\";\r\n\r\nexport const getUsers = (state) => {\r\n    return state.usersPage.users;\r\n}\r\n//export const getUsersSuperSelector = createSelector(getUsers, isFetching, (users, isFetching) => {\r\n//    return users.filter(u => true);\r\n//})\r\n\r\nexport const getPageSize = (state) => {\r\n    return state.usersPage.pageSize;\r\n}\r\n\r\nexport const getTotalUsersCount = (state) => {\r\n    return state.usersPage.totalUsersCount;\r\n}\r\n\r\nexport const getCurrentPage = (state) => {\r\n    return state.usersPage.currentPage;\r\n}\r\n\r\nexport const getIsFetching = (state) => {\r\n    return state.usersPage.isFetching;\r\n}\r\n\r\nexport const getFollowingInProgress = (state) => {\r\n    return state.usersPage.followingInProgress;\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { follow, setCurrentPage, unfollow, toggleFollowingProgress, requestUsers} from '../../redux/users-reducer';\r\nimport Users from './users';\r\nimport Preloader from '../common/preloader/preloader';\r\nimport { compose } from 'redux';\r\nimport { WithAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { getUsers, getPageSize, getTotalUsersCount, getCurrentPage, getIsFetching, getFollowingInProgress } from '../../selectors/users-selectors';\r\n\r\n\r\nclass UsersContainer extends React.Component {           \r\n    \r\n    componentDidMount () {                         // все перенеслось в reducer как thunk\r\n          \r\n        this.props.requestUsers(this.props.currentPage, this.props.pageSize);\r\n\r\n          /*this.props.toggleIsFetching(true);                         - когда идет загрузка\r\n\r\n        usersAPI.getUsers(this.props.currentPage, this.props.pageSize).then(data => {\r\n            this.props.toggleIsFetching(false);                        -  когда завершилась загрузка\r\n            this.props.setUsers(data.items)                   -  добавляется this так как не приходят нам props\r\n            this.props.setUsersTotalCount(data.totalCount);   - dispatch этот запрос, чтобы было известно сколько на сервере \r\n        });*/\r\n    }\r\n\r\n    onPageChanged = (pageNumber) => {                    //создаем метод для переключения страниц\r\n        \r\n        this.props.requestUsers(pageNumber, this.props.pageSize);\r\n        \r\n        /* this.props.setCurrentPage(pageNumber);\r\n            this.props.toggleIsFetching(true); \r\n        usersAPI.getUsers(pageNumber, this.props.pageSize).then(data => {\r\n            this.props.toggleIsFetching(false);    \r\n            this.props.setUsers(data.items);                                   \r\n        });*/\r\n    }\r\n   \r\n    render () {  \r\n\r\n        return  <>   \r\n                                                      \r\n        {this.props.isFetching ? <Preloader/> : null}    \r\n\r\n        <Users totalUsersCount={this.props.totalUsersCount}   //props получаем через connect от UsersContainer\r\n                       pageSize={this.props.pageSize}\r\n                       currentPage={this.props.currentPage}\r\n                       onPageChanged={this.onPageChanged}\r\n                       unfollow={this.props.unfollow}\r\n                       follow={this.props.follow}\r\n                       users={this.props.users}\r\n                      // toggleFollowingProgress={this.props.toggleFollowingProgress}\r\n                       followingInProgress={this.props.followingInProgress}\r\n        />\r\n        </>\r\n       }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return { \r\n      //users: getUsersSuperSelector(state),\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n\r\n};\r\n\r\n/*let mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        follow: (userId) => {\r\n            dispatch(followAC(userId));               сокращаем код и в connect заменяем mapDispatchToProps на объект со свойствами из \r\n        },                                            АС, только убираем везде АС, чтобы совпадало имя обьекта и его свойство\r\n        unfollow: (userId) => {\r\n            dispatch(unfollowAC(userId));                                         setUsers: setUsersAC => setUsers\r\n        },\r\n        setUsers: (users) => {\r\n            dispatch(setUsersAC(users));\r\n        },\r\n        setCurrentPage: (pageNumber) => {\r\n            dispatch(setCurrentPageAC(pageNumber))\r\n        },\r\n        setUsersTotalCount: (totalCount) => {\r\n            dispatch(setUsersTotalCountAC(totalCount))\r\n        },\r\n        toggleIsFetching: (isFetching) => {\r\n            dispatch(toggleIsFetchingAC(isFetching))\r\n        }\r\n    }\r\n    \r\n};*/\r\n\r\n/*export default connect (mapStateToProps, {follow, unfollow,  setCurrentPage, \r\n                                         - setUsersTotalCount, toggleIsFetching, setUsers - уже здесь не нужны -\r\n                                          toggleFollowingProgress, getUsers}) (UsersContainer);*/\r\n\r\nexport default compose (connect (mapStateToProps, {follow, unfollow,  setCurrentPage, toggleFollowingProgress, requestUsers}), \r\n                        WithAuthRedirect) (UsersContainer);\r\n "],"names":["totalItemsCount","pageSize","onPageChanged","currentPage","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","className","s","onClick","filter","p","map","undefined","user","followingInProgress","unfollow","follow","to","id","src","photos","small","alt","followed","disabled","some","name","status","totalUsersCount","props","users","u","getUsers","state","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","isFetching","getFollowingInProgress","UsersContainer","pageNumber","requestUsers","this","React","compose","connect","setCurrentPage","toggleFollowingProgress","WithAuthRedirect"],"sourceRoot":""}